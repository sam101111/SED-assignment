name: pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read
  packages: write

jobs:
  tests-unit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
    - name: Run unit tests
      run: |
        pytest -k "unit"

  code-ql:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: python
          build-mode: none

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set environment variables
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | tr '/' '-')
          echo "SAFE_BRANCH_NAME=$SAFE_BRANCH_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/help-desk-app-assignment" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest \
                       -t $IMAGE_NAME:${{ github.sha }} \
                       -t $IMAGE_NAME:$SAFE_BRANCH_NAME .

      - name: Push Docker Image
        run: docker push $IMAGE_NAME --all-tags

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build
    if: github.ref == 'refs/heads/main' 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Render
      run: |
        curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}" \
        -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

  zap-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull FastAPI Docker Image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/help-desk-app-assignment:latest

      - name: Run FastAPI container
        run: |
          docker network create zap-network || true  # Create the network if it doesn't exist
          docker run -d --name fastapi-container --network zap-network -p 8000:8000 ghcr.io/${{ github.repository_owner }}/help-desk-app-assignment:latest

      - name: Wait for FastAPI to be ready
        run: |
          until curl --silent --fail http://localhost:8000; do
            echo "Waiting for FastAPI to be available..."
            sleep 10
          done

      - name: Adjust permissions
        run: |
          chmod -R 777 $PWD

      - name: Run ZAP scanner
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm --network zap-network -v $PWD:/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://fastapi-container:8000 -d -g gen.conf -I -w /zap/wrk/zap_wiki_report.md


      - name: Stop FastAPI container
        run: |
          docker stop fastapi-container
  test-e2e:
    timeout-minutes: 60
    needs: build
    runs-on: ubuntu-latest
    services: 
      app:
        image: ghcr.io/${{ github.repository_owner }}/help-desk-app-assignment:latest
        ports:
          - 8000:8000
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run your tests
      run: pytest -k "e2e" --tracing=retain-on-failure 
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-traces
        path: test-results/
